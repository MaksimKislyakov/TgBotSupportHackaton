import config
import core
import telebot
import markup
import sys
from telebot import apihelper
from threading import Timer

active_buttons = {}
user_req_messages = {}
user_req_timers   = {}


class ButtonManager:
    def __init__(self, bot, timeout=86400):
        self.bot = bot
        self.timeout = timeout
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id —Ö—Ä–∞–Ω–∏–º –∫–æ—Ä—Ç–µ–∂ (message_id, Timer)
        self._data = {}

    def send(self, chat_id, text, reply_markup=None, parse_mode=None):
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent = self.bot.send_message(chat_id, text,
                                     reply_markup=reply_markup,
                                     parse_mode=parse_mode)
        msg_id = sent.message_id

        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ timeout —Å–µ–∫—É–Ω–¥
        def _delete():
            try:
                self.bot.delete_message(chat_id, msg_id)
            except:
                pass
            # —á–∏—Å—Ç–∏–º –∑–∞–ø–∏—Å—å
            self._data.pop(chat_id, None)

        t = Timer(self.timeout, _delete)
        t.start()

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –∏ message_id
        self._data[chat_id] = (msg_id, t)
        return sent
    
bot = telebot.TeleBot(config.TOKEN, skip_pending=True)
button_mgr = ButtonManager(bot, timeout=600)

def remove_buttons(chat_id, message_id):
    try:
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

def manage_agent_buttons(chat_id, markup):
    if chat_id in active_buttons:
        try:
            old = active_buttons[chat_id]
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=old['message_id'], reply_markup=None)
            old['timer'].cancel()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–Ω–æ–ø–æ–∫: {e}")

    msg = button_mgr.send(chat_id, "üìã –ú–µ–Ω—é –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", reply_markup=markup)

    timer = Timer(1800, remove_buttons, args=[chat_id, msg.message_id])
    timer.start()

    active_buttons[chat_id] = {'message_id': msg.message_id, 'timer': timer}

if config.PROXY_URL:
    apihelper.proxy = {'https': config.PROXY_URL}

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, 'üëãüèª –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞ –ò–¢—ã–ì–µ—Ä–æ–π.\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å</b> –∏ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç!', parse_mode='html', reply_markup=markup.markup_main())


@bot.message_handler(commands=['agent'])
def agent(message):
    user_id = message.from_user.id

    if core.check_agent_status(user_id) == True: 
        button_mgr.send(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        take_password_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_password_message, get_password_message)


@bot.message_handler(commands=['admin'])
def admin(message):
    user_id = message.from_user.id

    maksim = config.ADMIN_ID[1]
    andrey = config.ADMIN_ID[0]
    if str(user_id) == maksim:
        button_mgr.send(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω', reply_markup=markup.markup_admin())
    else:
        bot.send_message(message.chat.id, 'üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')


@bot.message_handler(content_types=['text'])
def send_text(message):
    user_id = message.from_user.id

    if message.text == '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å':
        take_new_request = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫ –≤–æ–ø—Ä–æ—Å—É —Ñ–∞–π–ª—ã/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/–≤–∏–¥–µ–æ', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_new_request, get_new_request)

    elif message.text == '‚úâÔ∏è –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã':
        # 1. –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—à–ª—ã–π —Ç–∞–π–º–µ—Ä –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if user_id in user_req_timers:
            user_req_timers[user_id].cancel()
        if user_id in user_req_messages:
            try:
                bot.delete_message(user_id, user_req_messages[user_id])
            except: pass

        # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        markup_req, value = markup.markup_reqs(user_id, 'my_reqs', '1')
        if value == 0:
            sent = bot.send_message(user_id, '–£ –≤–∞—Å –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.', reply_markup=markup.markup_main())
        else:
            sent = button_mgr.send(user_id,
                                    '–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:',
                                    reply_markup=markup_req)

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω
        user_req_messages[user_id] = sent.message_id

        def _del():
            try: bot.delete_message(user_id, sent.message_id)
            except: pass
            user_req_messages.pop(user_id, None)
            user_req_timers.pop(user_id, None)

        t = Timer(1800, _del)
        t.start()
        user_req_timers[user_id] = t
    
    elif message.text == 'üë§ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏':
        agent(message)
    else:
        bot.send_message(message.chat.id, '–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', parse_mode='html', reply_markup=markup.markup_main())


def get_password_message(message):
    password = message.text
    user_id = message.from_user.id

    if password == None:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)

    elif password.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    elif core.valid_password(password) == True:
        core.delete_password(password)
        core.add_agent(user_id)

        bot.send_message(message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_main())
        button_mgr.send(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏:', parse_mode='html', reply_markup=markup.markup_agent())

    else:
        send_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send_message, get_password_message)


def get_agent_id_message(message):
    agent_id = message.text

    if agent_id == None:
        take_agent_id_message = bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

    elif agent_id.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    else:
        core.add_agent(agent_id)
        bot.send_message(message.chat.id, '‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.', reply_markup=markup.markup_main())
        button_mgr.send(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', reply_markup=markup.markup_admin())


def get_new_request(message):
    request = message.text
    user_id = message.from_user.id
    check_file = core.get_file(message)

    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        type = check_file['type']
        request = check_file['text']

        if str(request) == 'None':
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å —Ñ–∞–π–ª–æ–º.', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        else:
            req_id = core.new_req(user_id, request)
            core.add_file(req_id, file_id, file_name, type)

            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥ ID {req_id} —Å–æ–∑–¥–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã</b>', parse_mode='html', reply_markup=markup.markup_main())        
    
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    else:
        if request == None:
            take_new_request = bot.send_message(message.chat.id, '‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤–∞–º–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)', reply_markup=markup.markup_cancel())

            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(take_new_request, get_new_request)

        elif request.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
            return

        else:
            req_id = core.new_req(user_id, request)
            bot.send_message(message.chat.id, f'‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥ ID {req_id} —Å–æ–∑–¥–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã</b>', parse_mode='html', reply_markup=markup.markup_main())


def get_additional_message(message, req_id, status):
    additional_message = message.text
    check_file = core.get_file(message)
    
    #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
    if check_file != None:
        file_id = check_file['file_id']
        file_name = check_file['file_name']
        type = check_file['type']
        additional_message = check_file['text']

        core.add_file(req_id, file_id, file_name, type)

    if additional_message == None:
        take_additional_message = bot.send_message(chat_id=message.chat.id, text='‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤–∞–º–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).', reply_markup=markup.markup_cancel())

        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(take_additional_message, get_additional_message, req_id, status)

    elif additional_message.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.markup_main())
        return

    else:
        if additional_message != 'None':
            core.add_message(req_id, additional_message, status)

        if check_file != None:
            if additional_message != 'None':
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!'
            else:
                text = '‚úÖ –í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
        else:
            text = '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
        
        if status == 'agent':
            bot.send_message(message.chat.id, text)
            manage_agent_buttons(message.chat.id, markup.markup_agent())
        else:
            bot.send_message(message.chat.id, text, reply_markup=markup.markup_main())

        if status == 'agent':
            user_id = core.get_user_id_of_req(req_id)
            try:
                if additional_message == 'None':
                    additional_message = ''

                bot.send_message(user_id, f'‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å ID {req_id}!\n\nüßë‚Äçüíª –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{additional_message}', reply_markup=markup.markup_main())

                if type == 'photo':
                    bot.send_photo(user_id, photo=file_id, reply_markup=markup.markup_main())
                elif type == 'document':
                    bot.send_document(user_id, document=file_id, reply_markup=markup.markup_main())
                elif type == 'video':
                    bot.send_video(user_id, data=file_id, reply_markup=markup.markup_main())
                elif type == 'audio':
                    bot.send_audio(user_id, audio=file_id, reply_markup=markup.markup_main())
                elif type == 'voice':
                    bot.send_voice(user_id, voice=file_id, reply_markup=markup.markup_main())
                else:
                    bot.send_message(user_id, additional_message, reply_markup=markup.markup_main())
            except:
                pass
        

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.message.chat.id

    if call.message:

        # === –°–µ–∫—Ü–∏—è ¬´–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã¬ª –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ ===
        if call.data.startswith(('my_reqs:', 'waiting_reqs:', 'answered_reqs:', 'confirm_reqs:')):
            parts = call.data.split(':')
            mode, number = parts[0], parts[1]

            markup_req, value = markup.markup_reqs(user_id, mode, number)

            if value == 0:
                bot.answer_callback_query(call.id)
                return bot.send_message(user_id, '‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())

            text = '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:'

            # === –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä ===
            if user_id in user_req_timers:
                user_req_timers[user_id].cancel()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä

            # === –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
            if user_id in user_req_messages:
                try:
                    bot.edit_message_text(
                        chat_id=user_id,
                        message_id=user_req_messages[user_id],
                        text=text,
                        reply_markup=markup_req
                    )
                    msg_id = user_req_messages[user_id]
                except Exception as e:
                    # –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
                    try:
                        bot.delete_message(user_id, user_req_messages[user_id])
                    except Exception as e:
                        print(f"Error deleting old message: {e}")
                    sent = button_mgr.send(user_id, text, reply_markup=markup_req)
                    msg_id = sent.message_id
            else:
                # –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                sent = button_mgr.send(user_id, text, reply_markup=markup_req)
                msg_id = sent.message_id

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            user_req_messages[user_id] = msg_id

            def _del():
                try:
                    bot.delete_message(user_id, msg_id)
                    user_req_messages.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                except Exception as e:
                    print(f"Error deleting message after timeout: {e}")
                finally:
                    user_req_timers.pop(user_id, None)  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è

            t = Timer(1800, _del)
            t.start()
            user_req_timers[user_id] = t

            bot.answer_callback_query(call.id)
            return

        # === –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏ –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===

        # –û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å
        elif call.data.startswith('open_req:'):
            parts = call.data.split(':')
            req_id, callback = parts[1], parts[2]
            req_status = core.get_req_status(req_id)
            request_data = core.get_request_data(req_id, callback)
            for i, data in enumerate(request_data, start=1):
                last = (i == len(request_data))
                keyboard = markup.markup_request_action(req_id, req_status, callback) if last else None
                bot.send_message(user_id, data, parse_mode='html', reply_markup=keyboard)
            bot.answer_callback_query(call.id)

        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif call.data.startswith('add_message:'):
            parts = call.data.split(':')
            req_id, status_user = parts[1], parts[2]
            msg = bot.send_message(user_id,
                                   '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)',
                                   reply_markup=markup.markup_cancel())
            bot.register_next_step_handler(msg, get_additional_message, req_id, status_user)
            bot.answer_callback_query(call.id)

        # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        elif call.data.startswith('confirm_req:'):
            parts = call.data.split(':')
            confirm_status, req_id = parts[1], parts[2]
            if core.get_req_status(req_id) == 'confirm':
                bot.send_message(user_id, "‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=markup.markup_main())
                return bot.answer_callback_query(call.id)
            if confirm_status == 'wait':
                button_mgr.send(user_id, "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>",
                                 parse_mode='html', reply_markup=markup.markup_confirm_req(req_id))
            else:  # 'true'
                core.confirm_req(req_id)
                try:
                    bot.edit_message_text(user_id, call.message.message_id, "‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                                          reply_markup=markup.markup_main())
                except:
                    bot.send_message(user_id, "‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=markup.markup_main())
            bot.answer_callback_query(call.id)


        #–§–∞–π–ª—ã –∑–∞–ø—Ä–æ—Å–∞
        elif 'req_files:' in call.data:
            parts = call.data.split(':')
            req_id = parts[1]
            callback = parts[2]
            number = parts[3]

            markup_and_value = markup.markup_files(number, req_id, callback)
            markup_files = markup_and_value[0]
            value = markup_and_value[1]

            if value == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.', reply_markup=markup_files)
            except:
                button_mgr.send(chat_id=call.message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.', reply_markup=markup_files)

            bot.answer_callback_query(call.id)

        #–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
        elif 'send_file:' in call.data:
            parts = call.data.split(':')
            id = parts[1]
            type = parts[2]

            file_id = core.get_file_id(id)

            if type == 'photo':
                bot.send_photo(call.message.chat.id, photo=file_id, reply_markup=markup.markup_main())
            elif type == 'document':
                bot.send_document(call.message.chat.id, document=file_id, reply_markup=markup.markup_main())
            elif type == 'video':
                bot.send_video(call.message.chat.id, data=file_id, reply_markup=markup.markup_main())
            elif type == 'audio':
                bot.send_audio(call.message.chat.id, audio=file_id, reply_markup=markup.markup_main())
            elif type == 'voice':
                bot.send_voice(call.message.chat.id, voice=file_id, reply_markup=markup.markup_main())
            
            bot.answer_callback_query(call.id)

        #–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–∞
        elif call.data == 'back_agent':
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())
            except:
                button_mgr.send(call.message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', parse_mode='html', reply_markup=markup.markup_agent())

            bot.answer_callback_query(call.id)

        #–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
        elif call.data == 'back_admin':
            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω', parse_mode='html', reply_markup=markup.markup_admin())
            except:
                button_mgr.send(call.message.chat.id, 'üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω', parse_mode='html', reply_markup=markup.markup_admin())

            bot.answer_callback_query(call.id)

        #–î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
        elif call.data == 'add_agent':
            take_agent_id_message = bot.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID Telegram.', reply_markup=markup.markup_cancel())
            bot.register_next_step_handler(take_agent_id_message, get_agent_id_message)

        #–í—Å–µ –∞–≥–µ–Ω—Ç—ã
        elif 'all_agents:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_agents(number)
            markup_agents = markup_and_value[0]
            len_agents = markup_and_value[1]

            if len_agents == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_agents)
            except:
                button_mgr.send(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_agents)

            bot.answer_callback_query(call.id)

        #–£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
        elif 'delete_agent:' in call.data:
            agent_id = call.data.split(':')[1]
            core.delete_agent(agent_id)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_agents('1')[0])
            except:
                button_mgr.send(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_agents('1')[0])

            bot.answer_callback_query(call.id)

        #–í—Å–µ –ø–∞—Ä–æ–ª–∏
        elif 'all_passwords:' in call.data:
            number = call.data.split(':')[1]
            markup_and_value = markup.markup_passwords(number)
            markup_passwords = markup_and_value[0]
            len_passwords = markup_and_value[1]

            if len_passwords == 0:
                bot.send_message(chat_id=call.message.chat.id, text='‚ö†Ô∏è –ü–∞—Ä–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.', reply_markup=markup.markup_main())
                bot.answer_callback_query(call.id)
                return

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_passwords)
            except:
                button_mgr.send(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup_passwords)

            bot.answer_callback_query(call.id)

        #–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å
        elif 'delete_password:' in call.data:
            password = call.data.split(':')[1]
            core.delete_password(password)

            try:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])
            except:
                button_mgr.send(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)

        #–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏
        
        elif call.data == 'generate_passwords':
            #10 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π, 16 - –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
            passwords = core.generate_passwords(10, 16) 
            core.add_passwords(passwords)

            text_passwords = ''
            i = 1
            for password in passwords:
                text_passwords += f'{i}. {password}\n'
                i += 1
            
            bot.send_message(call.message.chat.id, f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {i-1} –ø–∞—Ä–æ–ª–µ–π:\n\n{text_passwords}", parse_mode='html', reply_markup=markup.markup_main())
            button_mgr.send(call.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ', parse_mode='html', reply_markup=markup.markup_passwords('1')[0])

            bot.answer_callback_query(call.id)
        
        #–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
        elif 'stop_bot:' in call.data:
            status = call.data.split(':')[1]

            #–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            if status == 'wait':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?", parse_mode='html', reply_markup=markup.markup_confirm_stop())
                except:
                    button_mgr.send(call.message.chat.id, f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?", parse_mode='html', reply_markup=markup.markup_confirm_stop())

            #–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
            elif status == 'confirm':
                try:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚úÖ –ë–æ—Ç –æ–∫–ª—é—á–µ–Ω.')
                except:
                    bot.send_message(chat_id=call.message.chat.id, text='‚úÖ –ë–æ—Ç –æ–∫–ª—é—á–µ–Ω.')

                bot.answer_callback_query(call.id)
                bot.stop_polling()
                sys.exit()


if __name__ == "__main__":
    bot.polling(none_stop=True)